class WakeWordManager {
    constructor() {
        this.isListening = false;
        this.recognition = null;
        this.checkInterval = null;
        this.serverAvailable = false;
        this.audioInteracted = false;
        this.lastDetectionTime = 0;
        this.detectionCooldown = 3000; // 3 segundos entre detecciones
    }

    async startListening() {
        try {
            console.log("üöÄ INICIANDO SISTEMA DE WAKE WORD MEJORADO...");
            this.updateUI('üîÑ Iniciando sistema...', 'loading');

            // Mostrar consejos de uso
            this.showVoiceTips();
            
            // Verificar permisos de audio primero
            await this.ensureAudioPermissions();
            
            this.serverAvailable = await this.checkServer();
            
            if (this.serverAvailable) {
                console.log("‚úÖ Servidor disponible - usando wake word del servidor");
                return await this.startServerWakeWord();
            } else {
                console.log("‚ö†Ô∏è Servidor no disponible - usando wake word local");
                return this.startLocalWakeWord();
            }

        } catch (error) {
            console.error('‚ùå Error cr√≠tico:', error);
            return this.startLocalWakeWord();
        }
    }

    showVoiceTips() {
        console.log("üéß CONSEJOS PARA MEJOR DETECCI√ìN:");
        console.log("üí° Habla en un entorno tranquilo");
        console.log("üí° Di 'Gwen' seguido inmediatamente de tu comando");
        console.log("üí° Ejemplo: 'Gwen agrega 10 latas de at√∫n'");
        console.log("üí° Habla claro y a velocidad normal");
        console.log("üí° Mant√©n el micr√≥fono a 10-20 cm de tu boca");
    }

    async ensureAudioPermissions() {
        try {
            // Solicitar permisos de audio silenciosamente
            const stream = await navigator.mediaDevices.getUserMedia({ 
                audio: {
                    echoCancellation: true,
                    noiseSuppression: true,
                    autoGainControl: true
                }
            });
            stream.getTracks().forEach(track => track.stop());
            this.audioInteracted = true;
            console.log("‚úÖ Permisos de audio concedidos con optimizaciones");
        } catch (error) {
            console.warn("‚ö†Ô∏è Permisos de audio no concedidos:", error);
            // No bloquear si no hay permisos, seguir igual
        }
    }

    async checkServer() {
        try {
            const response = await fetch('/api/check-awake', { 
                signal: AbortSignal.timeout(2000) 
            });
            return response.ok;
        } catch (error) {
            return false;
        }
    }

    async startServerWakeWord() {
        try {
            const response = await fetch('/api/start-wake-word', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });

            if (!response.ok) throw new Error(`HTTP ${response.status}`);

            const data = await response.json();
            if (data.success) {
                this.isListening = true;
                this.startServerCheck();
                this.updateUI('üéØ Escuchando... Di "GWEN"', 'listening');
                console.log("‚úÖ WAKE WORD DEL SERVIDOR ACTIVADO");
                return true;
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            console.error('‚ùå Error con servidor:', error);
            this.serverAvailable = false;
            return this.startLocalWakeWord();
        }
    }

    startLocalWakeWord() {
        try {
            if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
                this.updateUI('‚ùå Navegador no compatible con voz', 'error');
                return false;
            }

            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            this.recognition = new SpeechRecognition();
            
            this.recognition.continuous = true;
            this.recognition.interimResults = true;
            this.recognition.lang = 'es-ES';
            this.recognition.maxAlternatives = 3; // Aumentado para mejores resultados

            this.recognition.onstart = () => {
                this.isListening = true;
                this.updateUI('üéØ Escuchando localmente... Di "GWEN"', 'listening');
                console.log("‚úÖ WAKE WORD LOCAL ACTIVADO CON DETECCI√ìN MEJORADA");
            };

            this.recognition.onresult = (event) => {
                for (let i = event.resultIndex; i < event.results.length; i++) {
                    if (event.results[i].isFinal) {
                        const transcript = event.results[i][0].transcript.toLowerCase();
                        const confidence = event.results[i][0].confidence;
                        
                        console.log(`üîç Texto detectado: "${transcript}" (confianza: ${confidence})`);
                        
                        // Procesar todas las alternativas
                        for (let j = 0; j < event.results[i].length; j++) {
                            const alternative = event.results[i][j].transcript.toLowerCase();
                            console.log(`   Alternativa ${j}: "${alternative}"`);
                            
                            if (this.detectWakeWord(alternative)) {
                                console.log("üéØ ¬°GWEN DETECTADO LOCALMENTE!");
                                this.onWakeWordDetected();
                                break;
                            }
                        }
                    }
                }
            };

            this.recognition.onerror = (event) => {
                console.error('‚ùå Error reconocimiento:', event.error);
                
                if (event.error === 'not-allowed') {
                    this.updateUI('‚ùå Permiso de micr√≥fono denegado', 'error');
                    this.isListening = false;
                } else {
                    // Reintentar autom√°ticamente
                    setTimeout(() => {
                        if (this.isListening) {
                            this.recognition.start();
                        }
                    }, 1000);
                }
            };

            this.recognition.onend = () => {
                if (this.isListening && this.recognition) {
                    setTimeout(() => {
                        try {
                            this.recognition.start();
                        } catch (e) {
                            console.error('Error reiniciando:', e);
                        }
                    }, 500);
                }
            };

            this.recognition.start();
            return true;

        } catch (error) {
            console.error('‚ùå Error iniciando wake word local:', error);
            this.updateUI('‚ùå Error iniciando escucha', 'error');
            return false;
        }
    }

    detectWakeWord(text) {
        // Verificar cooldown para evitar detecciones m√∫ltiples
        const now = Date.now();
        if (now - this.lastDetectionTime < this.detectionCooldown) {
            console.log('‚è≥ En cooldown, ignorando...');
            return false;
        }

        // VARIANTES EXPANDIDAS MEJORADAS
        const wakeWords = [
            'gwen', 'guen', 'wen', 'buen', 'g√ºen', 'gween', 'guenn',
            // Variantes que el reconocimiento confunde - EXPANDIDAS
            'wendy', 'when', 'wenn', 'wend', 'guan', 'g√ºenn', 'buenn',
            'wen di', 'when di', 'wendi', 'guendi', 'g√ºendi', 'wenti',
            'guenti', 'huen', 'g√ºen', 'g√ºenn', 'g√ºendi', 'g√ºenti', 
            'g√ºenny', 'w√©n', 'gu√©n', 'bu√©n', 'g√º√©n', 'weni', 'gueni',
            'bwen', 'gwenn', 'wenn', 'bw√©n', 'gw√©n', 'w√©nn'
        ];
        
        const textLower = text.toLowerCase().trim();
        
        console.log(`üîç Frontend analizando: "${textLower}"`);
        
        // Buscar coincidencias directas
        const directMatch = wakeWords.some(word => {
            // Buscar palabra completa o como inicio de palabra
            return textLower.includes(word) || 
                   textLower.split(' ').some(w => w.startsWith(word));
        });
        
        if (directMatch) {
            console.log('üéØ Wake word detectada por coincidencia directa');
            this.lastDetectionTime = now;
            return true;
        }
        
        // Detecci√≥n por sonido similar MEJORADA
        const words = textLower.split(' ');
        for (let word of words) {
            if (word.length >= 2) { // Reducido a 2 caracteres m√≠nimo
                // Palabras que comienzan con w/g/b/gu/gw/bu y tienen "en" o sonidos similares
                const startsWithSound = word.startsWith('w') || word.startsWith('g') || word.startsWith('b') || 
                                      word.startsWith('gu') || word.startsWith('gw') || word.startsWith('bu') ||
                                      word.startsWith('hu') || word.startsWith('wu');
                
                const containsEnSound = word.includes('en') || word.includes('an') || word.includes('on') || 
                                      word.includes('in') || word.includes('un') || word.includes('wen') || 
                                      word.includes('gen') || word.includes('ben') || word.includes('uen') ||
                                      word.includes('√©n') || word.includes('√°n') || word.includes('√≥n');
                
                if (startsWithSound && containsEnSound) {
                    console.log(`üéØ Detecci√≥n por sonido: "${word}" suena como "gwen"`);
                    this.lastDetectionTime = now;
                    return true;
                }
                
                // Detectar por primera s√≠laba MEJORADO
                const firstSyllables = ['wen', 'gen', 'ben', 'guen', 'gwen', 'when', 'buen', 'g√ºen', 'w√©n', 'gu√©n'];
                for (let syllable of firstSyllables) {
                    if (word.startsWith(syllable) || 
                        word.substring(0, 4).includes(syllable) ||
                        this.calculateSimilarity(word.substring(0, 3), syllable) > 0.6) {
                        console.log(`üéØ Detecci√≥n por s√≠laba: "${word}" -> "${syllable}"`);
                        this.lastDetectionTime = now;
                        return true;
                    }
                }
                
                // Detecci√≥n por similitud fon√©tica
                if (this.calculateSimilarity(word, 'gwen') > 0.6) {
                    console.log(`üéØ Detecci√≥n por similitud: "${word}" -> "gwen"`);
                    this.lastDetectionTime = now;
                    return true;
                }
            }
        }
        
        console.log('‚ùå No se detect√≥ wake word');
        return false;
    }

    calculateSimilarity(word1, word2) {
        // M√©todo simple de similitud
        const set1 = new Set(word1);
        const set2 = new Set(word2);
        const intersection = new Set([...set1].filter(x => set2.has(x)));
        const union = new Set([...set1, ...set2]);
        return intersection.size / union.size;
    }

    startServerCheck() {
        console.log("üîÑ Iniciando verificaci√≥n del servidor...");
        this.checkInterval = setInterval(async () => {
            if (!this.isListening) return;
            
            try {
                const response = await fetch('/api/check-awake');
                if (response.ok) {
                    const data = await response.json();
                    if (data.awake) {
                        console.log("üéØ ¬°WAKE WORD DETECTADO EN SERVIDOR!");
                        this.onWakeWordDetected();
                    }
                }
            } catch (error) {
                // Error silencioso
            }
        }, 800);
    }

    async stopListening() {
        console.log("üõë DETENIENDO WAKE WORD...");
        this.isListening = false;

        if (this.recognition) {
            this.recognition.stop();
            this.recognition = null;
        }

        this.stopServerCheck();

        try {
            await fetch('/api/stop-wake-word', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
        } catch (error) {
            // Ignorar errores
        }

        this.updateUI('üîá Wake word desactivado', 'stopped');
        console.log("‚úÖ WAKE WORD DETENIDO");
    }

    stopServerCheck() {
        if (this.checkInterval) {
            clearInterval(this.checkInterval);
            this.checkInterval = null;
        }
    }

    onWakeWordDetected() {
        console.log("üéØ ACTIVANDO GRABACI√ìN AUTOM√ÅTICA...");
        this.updateUI('‚úÖ ¬°GWEN ACTIVADA! Iniciando grabaci√≥n...', 'activated');

        setTimeout(() => {
            const startBtn = document.getElementById('startBtn');
            if (startBtn && !startBtn.disabled) {
                console.log("üéØ EJECUTANDO GRABACI√ìN...");
                
                // Forzar interacci√≥n con el documento primero
                this.forceUserInteraction();
                
                startBtn.click();

                const statusElement = document.getElementById('status');
                if (statusElement) {
                    statusElement.textContent = "üé§ Activado por voz - Habla ahora";
                    statusElement.classList.add('auto-recording');
                }

                // Reactivar despu√©s de 10 segundos para comandos largos
                setTimeout(() => {
                    if (this.isListening) {
                        this.updateUI('üéØ Escuchando... Di "GWEN"', 'listening');
                        console.log("‚úÖ WAKE WORD REACTIVADO");
                    }
                }, 10000);

            } else {
                console.log("‚ö†Ô∏è Bot√≥n de grabaci√≥n no disponible");
                this.updateUI('‚ö†Ô∏è Error al activar grabaci√≥n', 'warning');
                
                setTimeout(() => {
                    if (this.isListening) {
                        this.updateUI('üéØ Escuchando... Di "GWEN"', 'listening');
                    }
                }, 3000);
            }
        }, 1000);
    }

    forceUserInteraction() {
        // Crear un clic silencioso para cumplir con la pol√≠tica de autoplay
        try {
            const clicker = document.createElement('button');
            clicker.style.display = 'none';
            document.body.appendChild(clicker);
            clicker.click();
            document.body.removeChild(clicker);
            console.log("‚úÖ Interacci√≥n forzada para pol√≠ticas de audio");
        } catch (e) {
            console.warn("‚ö†Ô∏è No se pudo forzar interacci√≥n:", e);
        }
    }

    updateUI(message, status) {
        const statusElement = document.getElementById('wakeWordStatus');
        const button = document.getElementById('wakeWordButton');
        
        if (statusElement) {
            statusElement.textContent = message;
            statusElement.className = `wake-word-status ${status}`;
        }
        
        if (button) {
            if (this.isListening) {
                button.textContent = 'üõë Detener Escucha';
                button.classList.add('active');
            } else {
                button.textContent = 'üéØ Activar Escucha por Voz';
                button.classList.remove('active');
            }
        }
        
        console.log(`üü° WAKE WORD UI [${status}]: ${message}`);
    }
}

// Inicializaci√≥n
document.addEventListener('DOMContentLoaded', function() {
    console.log("üöÄ INICIALIZANDO WAKE WORD MANAGER MEJORADO...");
    window.wakeWordManager = new WakeWordManager();
    
    const wakeWordButton = document.getElementById('wakeWordButton');
    if (wakeWordButton) {
        wakeWordButton.addEventListener('click', function() {
            if (window.wakeWordManager.isListening) {
                window.wakeWordManager.stopListening();
            } else {
                window.wakeWordManager.startListening();
            }
        });
    }
});